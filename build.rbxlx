<roblox version="4">
  <Item class="Lighting" referent="0">
    <Properties>
      <string name="Name">Lighting</string>
      <Color3 name="Ambient">
        <R>0</R>
        <G>0</G>
        <B>0</B>
      </Color3>
      <float name="Brightness">2</float>
      <bool name="GlobalShadows">true</bool>
      <bool name="Outlines">false</bool>
      <token name="Technology">1</token>
    </Properties>
  </Item>
  <Item class="ReplicatedStorage" referent="1">
    <Properties>
      <string name="Name">ReplicatedStorage</string>
    </Properties>
    <Item class="ModuleScript" referent="2">
      <Properties>
        <string name="Name">TestEz</string>
        <string name="Source">local Expectation = require(script.Expectation)
local TestBootstrap = require(script.TestBootstrap)
local TestEnum = require(script.TestEnum)
local TestPlan = require(script.TestPlan)
local TestPlanner = require(script.TestPlanner)
local TestResults = require(script.TestResults)
local TestRunner = require(script.TestRunner)
local TestSession = require(script.TestSession)
local TextReporter = require(script.Reporters.TextReporter)
local TextReporterQuiet = require(script.Reporters.TextReporterQuiet)
local TeamCityReporter = require(script.Reporters.TeamCityReporter)

local function run(testRoot, callback)
	local modules = TestBootstrap:getModules(testRoot)
	local plan = TestPlanner.createPlan(modules)
	local results = TestRunner.runPlan(plan)

	callback(results)
end

local TestEZ = {
	run = run,

	Expectation = Expectation,
	TestBootstrap = TestBootstrap,
	TestEnum = TestEnum,
	TestPlan = TestPlan,
	TestPlanner = TestPlanner,
	TestResults = TestResults,
	TestRunner = TestRunner,
	TestSession = TestSession,

	Reporters = {
		TextReporter = TextReporter,
		TextReporterQuiet = TextReporterQuiet,
		TeamCityReporter = TeamCityReporter,
	},
}

return TestEZ</string>
      </Properties>
      <Item class="ModuleScript" referent="3">
        <Properties>
          <string name="Name">Context</string>
          <string name="Source"><![CDATA[--[[
	The Context object implements a write-once key-value store. It also allows
	for a new Context object to inherit the entries from an existing one.
]]
local Context = {}

function Context.new(parent)
	local meta = {}
	local index = {}
	meta.__index = index

	if parent then
		for key, value in pairs(getmetatable(parent).__index) do
			index[key] = value
		end
	end

	function meta.__newindex(_obj, key, value)
		assert(index[key] == nil, string.format("Cannot reassign %s in context", tostring(key)))
		index[key] = value
	end

	return setmetatable({}, meta)
end

return Context
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="4">
        <Properties>
          <string name="Name">Expectation</string>
          <string name="Source"><![CDATA[--[[
	Allows creation of expectation statements designed for behavior-driven
	testing (BDD). See Chai (JS) or RSpec (Ruby) for examples of other BDD
	frameworks.

	The Expectation class is exposed to tests as a function called `expect`:

		expect(5).to.equal(5)
		expect(foo()).to.be.ok()

	Expectations can be negated using .never:

		expect(true).never.to.equal(false)

	Expectations throw errors when their conditions are not met.
]]

local Expectation = {}

--[[
	These keys don't do anything except make expectations read more cleanly
]]
local SELF_KEYS = {
	to = true,
	be = true,
	been = true,
	have = true,
	was = true,
	at = true,
}

--[[
	These keys invert the condition expressed by the Expectation.
]]
local NEGATION_KEYS = {
	never = true,
}

--[[
	Extension of Lua's 'assert' that lets you specify an error level.
]]
local function assertLevel(condition, message, level)
	message = message or "Assertion failed!"
	level = level or 1

	if not condition then
		error(message, level + 1)
	end
end

--[[
	Returns a version of the given method that can be called with either . or :
]]
local function bindSelf(self, method)
	return function(firstArg, ...)
		if firstArg == self then
			return method(self, ...)
		else
			return method(self, firstArg, ...)
		end
	end
end

local function formatMessage(result, trueMessage, falseMessage)
	if result then
		return trueMessage
	else
		return falseMessage
	end
end

--[[
	Create a new expectation
]]
function Expectation.new(value)
	local self = {
		value = value,
		successCondition = true,
		condition = false,
		matchers = {},
		_boundMatchers = {},
	}

	setmetatable(self, Expectation)

	self.a = bindSelf(self, self.a)
	self.an = self.a
	self.ok = bindSelf(self, self.ok)
	self.equal = bindSelf(self, self.equal)
	self.throw = bindSelf(self, self.throw)
	self.near = bindSelf(self, self.near)

	return self
end

function Expectation.checkMatcherNameCollisions(name)
	if SELF_KEYS[name] or NEGATION_KEYS[name] or Expectation[name] then
		return false
	end

	return true
end

function Expectation:extend(matchers)
	self.matchers = matchers or {}

	for name, implementation in pairs(self.matchers) do
		self._boundMatchers[name] = bindSelf(self, function(_self, ...)
			local result = implementation(self.value, ...)
			local pass = result.pass == self.successCondition

			assertLevel(pass, result.message, 3)
			self:_resetModifiers()
			return self
		end)
	end

	return self
end

function Expectation.__index(self, key)
	-- Keys that don't do anything except improve readability
	if SELF_KEYS[key] then
		return self
	end

	-- Invert your assertion
	if NEGATION_KEYS[key] then
		local newExpectation = Expectation.new(self.value):extend(self.matchers)
		newExpectation.successCondition = not self.successCondition

		return newExpectation
	end

	if self._boundMatchers[key] then
		return self._boundMatchers[key]
	end

	-- Fall back to methods provided by Expectation
	return Expectation[key]
end

--[[
	Called by expectation terminators to reset modifiers in a statement.

	This makes chains like:

		expect(5)
			.never.to.equal(6)
			.to.equal(5)

	Work as expected.
]]
function Expectation:_resetModifiers()
	self.successCondition = true
end

--[[
	Assert that the expectation value is the given type.

	expect(5).to.be.a("number")
]]
function Expectation:a(typeName)
	local result = (type(self.value) == typeName) == self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected value of type %q, got value %q of type %s"):format(
			typeName,
			tostring(self.value),
			type(self.value)
		),
		("Expected value not of type %q, got value %q of type %s"):format(
			typeName,
			tostring(self.value),
			type(self.value)
		)
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

-- Make alias public on class
Expectation.an = Expectation.a

--[[
	Assert that our expectation value is truthy
]]
function Expectation:ok()
	local result = (self.value ~= nil) == self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected value %q to be non-nil"):format(
			tostring(self.value)
		),
		("Expected value %q to be nil"):format(
			tostring(self.value)
		)
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

--[[
	Assert that our expectation value is equal to another value
]]
function Expectation:equal(otherValue)
	local result = (self.value == otherValue) == self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected value %q (%s), got %q (%s) instead"):format(
			tostring(otherValue),
			type(otherValue),
			tostring(self.value),
			type(self.value)
		),
		("Expected anything but value %q (%s)"):format(
			tostring(otherValue),
			type(otherValue)
		)
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

--[[
	Assert that our expectation value is equal to another value within some
	inclusive limit.
]]
function Expectation:near(otherValue, limit)
	assert(type(self.value) == "number", "Expectation value must be a number to use 'near'")
	assert(type(otherValue) == "number", "otherValue must be a number")
	assert(type(limit) == "number" or limit == nil, "limit must be a number or nil")

	limit = limit or 1e-7

	local result = (math.abs(self.value - otherValue) <= limit) == self.successCondition

	local message = formatMessage(self.successCondition,
		("Expected value to be near %f (within %f) but got %f instead"):format(
			otherValue,
			limit,
			self.value
		),
		("Expected value to not be near %f (within %f) but got %f instead"):format(
			otherValue,
			limit,
			self.value
		)
	)

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

--[[
	Assert that our functoid expectation value throws an error when called.
	An optional error message can be passed to assert that the error message
	contains the given value.
]]
function Expectation:throw(messageSubstring)
	local ok, err = pcall(self.value)
	local result = ok ~= self.successCondition

	if messageSubstring and not ok then
		if self.successCondition then
			result = err:find(messageSubstring, 1, true) ~= nil
		else
			result = err:find(messageSubstring, 1, true) == nil
		end
	end

	local message

	if messageSubstring then
		message = formatMessage(self.successCondition,
			("Expected function to throw an error containing %q, but it %s"):format(
				messageSubstring,
				err and ("threw: %s"):format(err) or "did not throw."
			),
			("Expected function to never throw an error containing %q, but it threw: %s"):format(
				messageSubstring,
				tostring(err)
			)
		)
	else
		message = formatMessage(self.successCondition,
			"Expected function to throw an error, but it did not throw.",
			("Expected function to succeed, but it threw an error: %s"):format(
				tostring(err)
			)
		)
	end

	assertLevel(result, message, 3)
	self:_resetModifiers()

	return self
end

return Expectation
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="5">
        <Properties>
          <string name="Name">ExpectationContext</string>
          <string name="Source"><![CDATA[local Expectation = require(script.Parent.Expectation)
local checkMatcherNameCollisions = Expectation.checkMatcherNameCollisions

local function copy(t)
	local result = {}

	for key, value in pairs(t) do
		result[key] = value
	end

	return result
end

local ExpectationContext = {}
ExpectationContext.__index = ExpectationContext

function ExpectationContext.new(parent)
	local self = {
		_extensions = parent and copy(parent._extensions) or {},
	}

	return setmetatable(self, ExpectationContext)
end

function ExpectationContext:startExpectationChain(...)
	return Expectation.new(...):extend(self._extensions)
end

function ExpectationContext:extend(config)
	for key, value in pairs(config) do
		assert(self._extensions[key] == nil, string.format("Cannot reassign %q in expect.extend", key))
		assert(checkMatcherNameCollisions(key), string.format("Cannot overwrite matcher %q; it already exists", key))

		self._extensions[key] = value
	end
end

return ExpectationContext
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="6">
        <Properties>
          <string name="Name">LifecycleHooks</string>
          <string name="Source"><![CDATA[local TestEnum = require(script.Parent.TestEnum)

local LifecycleHooks = {}
LifecycleHooks.__index = LifecycleHooks

function LifecycleHooks.new()
	local self = {
		_stack = {},
	}
	return setmetatable(self, LifecycleHooks)
end

--[[
	Returns an array of `beforeEach` hooks in FIFO order
]]
function LifecycleHooks:getBeforeEachHooks()
	local key = TestEnum.NodeType.BeforeEach
	local hooks = {}

	for _, level in ipairs(self._stack) do
		for _, hook in ipairs(level[key]) do
			table.insert(hooks, hook)
		end
	end

	return hooks
end

--[[
	Returns an array of `afterEach` hooks in FILO order
]]
function LifecycleHooks:getAfterEachHooks()
	local key = TestEnum.NodeType.AfterEach
	local hooks = {}

	for _, level in ipairs(self._stack) do
		for _, hook in ipairs(level[key]) do
			table.insert(hooks, 1, hook)
		end
	end

	return hooks
end

--[[
	Pushes uncalled beforeAll and afterAll hooks back up the stack
]]
function LifecycleHooks:popHooks()
	table.remove(self._stack, #self._stack)
end

function LifecycleHooks:pushHooksFrom(planNode)
	assert(planNode ~= nil)

	table.insert(self._stack, {
		[TestEnum.NodeType.BeforeAll] = self:_getHooksOfType(planNode.children, TestEnum.NodeType.BeforeAll),
		[TestEnum.NodeType.AfterAll] = self:_getHooksOfType(planNode.children, TestEnum.NodeType.AfterAll),
		[TestEnum.NodeType.BeforeEach] = self:_getHooksOfType(planNode.children, TestEnum.NodeType.BeforeEach),
		[TestEnum.NodeType.AfterEach] = self:_getHooksOfType(planNode.children, TestEnum.NodeType.AfterEach),
	})
end

--[[
	Get the beforeAll hooks from the current level.
]]
function LifecycleHooks:getBeforeAllHooks()
	return self._stack[#self._stack][TestEnum.NodeType.BeforeAll]
end

--[[
	Get the afterAll hooks from the current level.
]]
function LifecycleHooks:getAfterAllHooks()
	return self._stack[#self._stack][TestEnum.NodeType.AfterAll]
end

function LifecycleHooks:_getHooksOfType(nodes, key)
	local hooks = {}

	for _, node in ipairs(nodes) do
		if node.type == key then
			table.insert(hooks, node.callback)
		end
	end

	return hooks
end

return LifecycleHooks
]]></string>
        </Properties>
      </Item>
      <Item class="Folder" referent="7">
        <Properties>
          <string name="Name">Reporters</string>
        </Properties>
        <Item class="ModuleScript" referent="8">
          <Properties>
            <string name="Name">TeamCityReporter</string>
            <string name="Source">local TestService = game:GetService("TestService")

local TestEnum = require(script.Parent.Parent.TestEnum)

local TeamCityReporter = {}

local function teamCityEscape(str)
	str = string.gsub(str, "([]|'[])","|%1")
	str = string.gsub(str, "\r", "|r")
	str = string.gsub(str, "\n", "|n")
	return str
end

local function teamCityEnterSuite(suiteName)
	return string.format("##teamcity[testSuiteStarted name='%s']", teamCityEscape(suiteName))
end

local function teamCityLeaveSuite(suiteName)
	return string.format("##teamcity[testSuiteFinished name='%s']", teamCityEscape(suiteName))
end

local function teamCityEnterCase(caseName)
	return string.format("##teamcity[testStarted name='%s']", teamCityEscape(caseName))
end

local function teamCityLeaveCase(caseName)
	return string.format("##teamcity[testFinished name='%s']", teamCityEscape(caseName))
end

local function teamCityFailCase(caseName, errorMessage)
	return string.format("##teamcity[testFailed name='%s' message='%s']",
		teamCityEscape(caseName), teamCityEscape(errorMessage))
end

local function reportNode(node, buffer, level)
	buffer = buffer or {}
	level = level or 0
	if node.status == TestEnum.TestStatus.Skipped then
		return buffer
	end
	if node.planNode.type == TestEnum.NodeType.Describe then
		table.insert(buffer, teamCityEnterSuite(node.planNode.phrase))
		for _, child in ipairs(node.children) do
			reportNode(child, buffer, level + 1)
		end
		table.insert(buffer, teamCityLeaveSuite(node.planNode.phrase))
	else
		table.insert(buffer, teamCityEnterCase(node.planNode.phrase))
		if node.status == TestEnum.TestStatus.Failure then
			table.insert(buffer, teamCityFailCase(node.planNode.phrase, table.concat(node.errors,"\n")))
		end
		table.insert(buffer, teamCityLeaveCase(node.planNode.phrase))
	end
end

local function reportRoot(node)
	local buffer = {}

	for _, child in ipairs(node.children) do
		reportNode(child, buffer, 0)
	end

	return buffer
end

local function report(root)
	local buffer = reportRoot(root)

	return table.concat(buffer, "\n")
end

function TeamCityReporter.report(results)
	local resultBuffer = {
		"Test results:",
		report(results),
		("%d passed, %d failed, %d skipped"):format(
			results.successCount,
			results.failureCount,
			results.skippedCount
		)
	}

	print(table.concat(resultBuffer, "\n"))

	if results.failureCount > 0 then
		print(("%d test nodes reported failures."):format(results.failureCount))
	end

	if #results.errors > 0 then
		print("Errors reported by tests:")
		print("")

		for _, message in ipairs(results.errors) do
			TestService:Error(message)

			-- Insert a blank line after each error
			print("")
		end
	end
end

return TeamCityReporter</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="9">
          <Properties>
            <string name="Name">TextReporter</string>
            <string name="Source">--[[
	The TextReporter uses the results from a completed test to output text to
	standard output and TestService.
]]

local TestService = game:GetService("TestService")

local TestEnum = require(script.Parent.Parent.TestEnum)

local INDENT = (" "):rep(3)
local STATUS_SYMBOLS = {
	[TestEnum.TestStatus.Success] = "+",
	[TestEnum.TestStatus.Failure] = "-",
	[TestEnum.TestStatus.Skipped] = "~"
}
local UNKNOWN_STATUS_SYMBOL = "?"

local TextReporter = {}

local function compareNodes(a, b)
	return a.planNode.phrase:lower() &lt; b.planNode.phrase:lower()
end

local function reportNode(node, buffer, level)
	buffer = buffer or {}
	level = level or 0

	if node.status == TestEnum.TestStatus.Skipped then
		return buffer
	end

	local line

	if node.status then
		local symbol = STATUS_SYMBOLS[node.status] or UNKNOWN_STATUS_SYMBOL

		line = ("%s[%s] %s"):format(
			INDENT:rep(level),
			symbol,
			node.planNode.phrase
		)
	else
		line = ("%s%s"):format(
			INDENT:rep(level),
			node.planNode.phrase
		)
	end

	table.insert(buffer, line)
	table.sort(node.children, compareNodes)

	for _, child in ipairs(node.children) do
		reportNode(child, buffer, level + 1)
	end

	return buffer
end

local function reportRoot(node)
	local buffer = {}
	table.sort(node.children, compareNodes)

	for _, child in ipairs(node.children) do
		reportNode(child, buffer, 0)
	end

	return buffer
end

local function report(root)
	local buffer = reportRoot(root)

	return table.concat(buffer, "\n")
end

function TextReporter.report(results)
	local resultBuffer = {
		"Test results:",
		report(results),
		("%d passed, %d failed, %d skipped"):format(
			results.successCount,
			results.failureCount,
			results.skippedCount
		)
	}

	print(table.concat(resultBuffer, "\n"))

	if results.failureCount > 0 then
		print(("%d test nodes reported failures."):format(results.failureCount))
	end

	if #results.errors > 0 then
		print("Errors reported by tests:")
		print("")

		for _, message in ipairs(results.errors) do
			TestService:Error(message)

			-- Insert a blank line after each error
			print("")
		end
	end
end

return TextReporter</string>
          </Properties>
        </Item>
        <Item class="ModuleScript" referent="10">
          <Properties>
            <string name="Name">TextReporterQuiet</string>
            <string name="Source">--[[
	Copy of TextReporter that doesn't output successful tests.

	This should be temporary, it's just a workaround to make CI environments
	happy in the short-term.
]]

local TestService = game:GetService("TestService")

local TestEnum = require(script.Parent.Parent.TestEnum)

local INDENT = (" "):rep(3)
local STATUS_SYMBOLS = {
	[TestEnum.TestStatus.Success] = "+",
	[TestEnum.TestStatus.Failure] = "-",
	[TestEnum.TestStatus.Skipped] = "~"
}
local UNKNOWN_STATUS_SYMBOL = "?"

local TextReporterQuiet = {}

local function reportNode(node, buffer, level)
	buffer = buffer or {}
	level = level or 0

	if node.status == TestEnum.TestStatus.Skipped then
		return buffer
	end

	local line

	if node.status ~= TestEnum.TestStatus.Success then
		local symbol = STATUS_SYMBOLS[node.status] or UNKNOWN_STATUS_SYMBOL

		line = ("%s[%s] %s"):format(
			INDENT:rep(level),
			symbol,
			node.planNode.phrase
		)
	end

	table.insert(buffer, line)

	for _, child in ipairs(node.children) do
		reportNode(child, buffer, level + 1)
	end

	return buffer
end

local function reportRoot(node)
	local buffer = {}

	for _, child in ipairs(node.children) do
		reportNode(child, buffer, 0)
	end

	return buffer
end

local function report(root)
	local buffer = reportRoot(root)

	return table.concat(buffer, "\n")
end

function TextReporterQuiet.report(results)
	local resultBuffer = {
		"Test results:",
		report(results),
		("%d passed, %d failed, %d skipped"):format(
			results.successCount,
			results.failureCount,
			results.skippedCount
		)
	}

	print(table.concat(resultBuffer, "\n"))

	if results.failureCount > 0 then
		print(("%d test nodes reported failures."):format(results.failureCount))
	end

	if #results.errors > 0 then
		print("Errors reported by tests:")
		print("")

		for _, message in ipairs(results.errors) do
			TestService:Error(message)

			-- Insert a blank line after each error
			print("")
		end
	end
end

return TextReporterQuiet</string>
          </Properties>
        </Item>
      </Item>
      <Item class="ModuleScript" referent="11">
        <Properties>
          <string name="Name">TestBootstrap</string>
          <string name="Source">--[[
	Provides an interface to quickly run and report tests from a given object.
]]

local TestPlanner = require(script.Parent.TestPlanner)
local TestRunner = require(script.Parent.TestRunner)
local TextReporter = require(script.Parent.Reporters.TextReporter)

local TestBootstrap = {}

local function stripSpecSuffix(name)
	return (name:gsub("%.spec$", ""))
end
local function isSpecScript(aScript)
	return aScript:IsA("ModuleScript") and aScript.Name:match("%.spec$")
end

local function getPath(module, root)
	root = root or game

	local path = {}
	local last = module

	if last.Name == "init.spec" then
		-- Use the directory's node for init.spec files.
		last = last.Parent
	end

	while last ~= nil and last ~= root do
		table.insert(path, stripSpecSuffix(last.Name))
		last = last.Parent
	end
	table.insert(path, stripSpecSuffix(root.Name))

	return path
end

local function toStringPath(tablePath)
	local stringPath = ""
	local first = true
	for _, element in ipairs(tablePath) do
		if first then
			stringPath = element
			first = false
		else
			stringPath = element .. " " .. stringPath
		end
	end
	return stringPath
end

function TestBootstrap:getModulesImpl(root, modules, current)
	modules = modules or {}
	current = current or root

	if isSpecScript(current) then
		local method = require(current)
		local path = getPath(current, root)
		local pathString = toStringPath(path)

		table.insert(modules, {
			method = method,
			path = path,
			pathStringForSorting = pathString:lower()
		})
	end
end

--[[
	Find all the ModuleScripts in this tree that are tests.
]]
function TestBootstrap:getModules(root)
	local modules = {}

	self:getModulesImpl(root, modules)

	for _, child in ipairs(root:GetDescendants()) do
		self:getModulesImpl(root, modules, child)
	end

	return modules
end

--[[
	Runs all test and reports the results using the given test reporter.

	If no reporter is specified, a reasonable default is provided.

	This function demonstrates the expected workflow with this testing system:
	1. Locate test modules
	2. Generate test plan
	3. Run test plan
	4. Report test results

	This means we could hypothetically present a GUI to the developer that shows
	the test plan before we execute it, allowing them to toggle specific tests
	before they're run, but after they've been identified!
]]
function TestBootstrap:run(roots, reporter, otherOptions)
	reporter = reporter or TextReporter

	otherOptions = otherOptions or {}
	local showTimingInfo = otherOptions["showTimingInfo"] or false
	local testNamePattern = otherOptions["testNamePattern"]
	local extraEnvironment = otherOptions["extraEnvironment"] or {}

	if type(roots) ~= "table" then
		error(("Bad argument #1 to TestBootstrap:run. Expected table, got %s"):format(typeof(roots)), 2)
	end

	local startTime = tick()

	local modules = {}
	for _, subRoot in ipairs(roots) do
		local newModules = self:getModules(subRoot)

		for _, newModule in ipairs(newModules) do
			table.insert(modules, newModule)
		end
	end

	local afterModules = tick()

	local plan = TestPlanner.createPlan(modules, testNamePattern, extraEnvironment)
	local afterPlan = tick()

	local results = TestRunner.runPlan(plan)
	local afterRun = tick()

	reporter.report(results)
	local afterReport = tick()

	if showTimingInfo then
		local timing = {
			("Took %f seconds to locate test modules"):format(afterModules - startTime),
			("Took %f seconds to create test plan"):format(afterPlan - afterModules),
			("Took %f seconds to run tests"):format(afterRun - afterPlan),
			("Took %f seconds to report tests"):format(afterReport - afterRun),
		}

		print(table.concat(timing, "\n"))
	end

	return results
end

return TestBootstrap</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="12">
        <Properties>
          <string name="Name">TestEnum</string>
          <string name="Source">--[[
	Constants used throughout the testing framework.
]]

local TestEnum = {}

TestEnum.TestStatus = {
	Success = "Success",
	Failure = "Failure",
	Skipped = "Skipped"
}

TestEnum.NodeType = {
	Describe = "Describe",
	It = "It",
	BeforeAll = "BeforeAll",
	AfterAll = "AfterAll",
	BeforeEach = "BeforeEach",
	AfterEach = "AfterEach"
}

TestEnum.NodeModifier = {
	None = "None",
	Skip = "Skip",
	Focus = "Focus"
}

return TestEnum</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="13">
        <Properties>
          <string name="Name">TestPlan</string>
          <string name="Source"><![CDATA[--[[
	Represents a tree of tests that have been loaded but not necessarily
	executed yet.

	TestPlan objects are produced by TestPlanner.
]]

local TestEnum = require(script.Parent.TestEnum)
local Expectation = require(script.Parent.Expectation)

local function newEnvironment(currentNode, extraEnvironment)
	local env = {}

	if extraEnvironment then
		if type(extraEnvironment) ~= "table" then
			error(("Bad argument #2 to newEnvironment. Expected table, got %s"):format(
				typeof(extraEnvironment)), 2)
		end

		for key, value in pairs(extraEnvironment) do
			env[key] = value
		end
	end

	local function addChild(phrase, callback, nodeType, nodeModifier)
		local node = currentNode:addChild(phrase, nodeType, nodeModifier)
		node.callback = callback
		if nodeType == TestEnum.NodeType.Describe then
			node:expand()
		end
		return node
	end

	function env.describeFOCUS(phrase, callback)
		addChild(phrase, callback, TestEnum.NodeType.Describe, TestEnum.NodeModifier.Focus)
	end

	function env.describeSKIP(phrase, callback)
		addChild(phrase, callback, TestEnum.NodeType.Describe, TestEnum.NodeModifier.Skip)
	end

	function env.describe(phrase, callback, nodeModifier)
		addChild(phrase, callback, TestEnum.NodeType.Describe, TestEnum.NodeModifier.None)
	end

	function env.itFOCUS(phrase, callback)
		addChild(phrase, callback, TestEnum.NodeType.It, TestEnum.NodeModifier.Focus)
	end

	function env.itSKIP(phrase, callback)
		addChild(phrase, callback, TestEnum.NodeType.It, TestEnum.NodeModifier.Skip)
	end

	function env.itFIXME(phrase, callback)
		local node = addChild(phrase, callback, TestEnum.NodeType.It, TestEnum.NodeModifier.Skip)
		warn("FIXME: broken test", node:getFullName())
	end

	function env.it(phrase, callback, nodeModifier)
		addChild(phrase, callback, TestEnum.NodeType.It, TestEnum.NodeModifier.None)
	end

	-- Incrementing counter used to ensure that beforeAll, afterAll, beforeEach, afterEach have unique phrases
	local lifecyclePhaseId = 0

	local lifecycleHooks = {
		[TestEnum.NodeType.BeforeAll] = "beforeAll",
		[TestEnum.NodeType.AfterAll] = "afterAll",
		[TestEnum.NodeType.BeforeEach] = "beforeEach",
		[TestEnum.NodeType.AfterEach] = "afterEach"
	}

	for nodeType, name in pairs(lifecycleHooks) do
		env[name] = function(callback)
			addChild(name .. "_" .. tostring(lifecyclePhaseId), callback, nodeType, TestEnum.NodeModifier.None)
			lifecyclePhaseId = lifecyclePhaseId + 1
		end
	end

	function env.FIXME(optionalMessage)
		warn("FIXME: broken test", currentNode:getFullName(), optionalMessage or "")

		currentNode.modifier = TestEnum.NodeModifier.Skip
	end

	function env.FOCUS()
		currentNode.modifier = TestEnum.NodeModifier.Focus
	end

	function env.SKIP()
		currentNode.modifier = TestEnum.NodeModifier.Skip
	end

	--[[
		This function is deprecated. Calling it is a no-op beyond generating a
		warning.
	]]
	function env.HACK_NO_XPCALL()
		warn("HACK_NO_XPCALL is deprecated. It is now safe to yield in an " ..
			"xpcall, so this is no longer necessary. It can be safely deleted.")
	end

	env.fit = env.itFOCUS
	env.xit = env.itSKIP
	env.fdescribe = env.describeFOCUS
	env.xdescribe = env.describeSKIP

	env.expect = setmetatable({
		extend = function(...)
			error("Cannot call \"expect.extend\" from within a \"describe\" node.")
		end,
	}, {
		__call = function(_self, ...)
			return Expectation.new(...)
		end,
	})

	return env
end

local TestNode = {}
TestNode.__index = TestNode

--[[
	Create a new test node. A pointer to the test plan, a phrase to describe it
	and the type of node it is are required. The modifier is optional and will
	be None if left blank.
]]
function TestNode.new(plan, phrase, nodeType, nodeModifier)
	nodeModifier = nodeModifier or TestEnum.NodeModifier.None

	local node = {
		plan = plan,
		phrase = phrase,
		type = nodeType,
		modifier = nodeModifier,
		children = {},
		callback = nil,
		parent = nil,
	}

	node.environment = newEnvironment(node, plan.extraEnvironment)
	return setmetatable(node, TestNode)
end

local function getModifier(name, pattern, modifier)
	if pattern and (modifier == nil or modifier == TestEnum.NodeModifier.None) then
		if name:match(pattern) then
			return TestEnum.NodeModifier.Focus
		else
			return TestEnum.NodeModifier.Skip
		end
	end
	return modifier
end

function TestNode:addChild(phrase, nodeType, nodeModifier)
	if nodeType == TestEnum.NodeType.It then
		for _, child in pairs(self.children) do
			if child.phrase == phrase then
				error("Duplicate it block found: " .. child:getFullName())
			end
		end
	end

	local childName = self:getFullName() .. " " .. phrase
	nodeModifier = getModifier(childName, self.plan.testNamePattern, nodeModifier)
	local child = TestNode.new(self.plan, phrase, nodeType, nodeModifier)
	child.parent = self
	table.insert(self.children, child)
	return child
end

--[[
	Join the names of all the nodes back to the parent.
]]
function TestNode:getFullName()
	if self.parent then
		local parentPhrase = self.parent:getFullName()
		if parentPhrase then
			return parentPhrase .. " " .. self.phrase
		end
	end
	return self.phrase
end

--[[
	Expand a node by setting its callback environment and then calling it. Any
	further it and describe calls within the callback will be added to the tree.
]]
function TestNode:expand()
	local originalEnv = getfenv(self.callback)
	local callbackEnv = setmetatable({}, { __index = originalEnv })
	for key, value in pairs(self.environment) do
		callbackEnv[key] = value
	end
	-- Copy 'script' directly to new env to make Studio debugger happy.
	-- Studio debugger does not look into __index, because of security reasons
	callbackEnv.script = originalEnv.script
	setfenv(self.callback, callbackEnv)

	local success, result = xpcall(self.callback, function(message)
		return debug.traceback(tostring(message), 2)
	end)

	if not success then
		self.loadError = result
	end
end

local TestPlan = {}
TestPlan.__index = TestPlan

--[[
	Create a new, empty TestPlan.
]]
function TestPlan.new(testNamePattern, extraEnvironment)
	local plan = {
		children = {},
		testNamePattern = testNamePattern,
		extraEnvironment = extraEnvironment,
	}

	return setmetatable(plan, TestPlan)
end

--[[
	Add a new child under the test plan's root node.
]]
function TestPlan:addChild(phrase, nodeType, nodeModifier)
	nodeModifier = getModifier(phrase, self.testNamePattern, nodeModifier)
	local child = TestNode.new(self, phrase, nodeType, nodeModifier)
	table.insert(self.children, child)
	return child
end

--[[
	Add a new describe node with the given method as a callback. Generates or
	reuses all the describe nodes along the path.
]]
function TestPlan:addRoot(path, method)
	local curNode = self
	for i = #path, 1, -1 do
		local nextNode = nil

		for _, child in ipairs(curNode.children) do
			if child.phrase == path[i] then
				nextNode = child
				break
			end
		end

		if nextNode == nil then
			nextNode = curNode:addChild(path[i], TestEnum.NodeType.Describe)
		end

		curNode = nextNode
	end

	curNode.callback = method
	curNode:expand()
end

--[[
	Calls the given callback on all nodes in the tree, traversed depth-first.
]]
function TestPlan:visitAllNodes(callback, root, level)
	root = root or self
	level = level or 0

	for _, child in ipairs(root.children) do
		callback(child, level)

		self:visitAllNodes(callback, child, level + 1)
	end
end

--[[
	Visualizes the test plan in a simple format, suitable for debugging the test
	plan's structure.
]]
function TestPlan:visualize()
	local buffer = {}
	self:visitAllNodes(function(node, level)
		table.insert(buffer, (" "):rep(3 * level) .. node.phrase)
	end)
	return table.concat(buffer, "\n")
end

--[[
	Gets a list of all nodes in the tree for which the given callback returns
	true.
]]
function TestPlan:findNodes(callback)
	local results = {}
	self:visitAllNodes(function(node)
		if callback(node) then
			table.insert(results, node)
		end
	end)
	return results
end

return TestPlan
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="14">
        <Properties>
          <string name="Name">TestPlanner</string>
          <string name="Source">--[[
	Turns a series of specification functions into a test plan.

	Uses a TestPlanBuilder to keep track of the state of the tree being built.
]]
local TestPlan = require(script.Parent.TestPlan)

local TestPlanner = {}

--[[
	Create a new TestPlan from a list of specification functions.

	These functions should call a combination of `describe` and `it` (and their
	variants), which will be turned into a test plan to be executed.

	Parameters:
		- modulesList - list of tables describing test modules {
			method, -- specification function described above
			path, -- array of parent entires, first element is the leaf that owns `method`
			pathStringForSorting -- a string representation of `path`, used for sorting of the test plan
		}
		- testNamePattern - Only tests matching this Lua pattern string will run. Pass empty or nil to run all tests
		- extraEnvironment - Lua table holding additional functions and variables to be injected into the specification
							function during execution
]]
function TestPlanner.createPlan(modulesList, testNamePattern, extraEnvironment)
	local plan = TestPlan.new(testNamePattern, extraEnvironment)

	table.sort(modulesList, function(a, b)
		return a.pathStringForSorting &lt; b.pathStringForSorting
	end)

	for _, module in ipairs(modulesList) do
		plan:addRoot(module.path, module.method)
	end

	return plan
end

return TestPlanner</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="15">
        <Properties>
          <string name="Name">TestResults</string>
          <string name="Source">--[[
	Represents a tree of test results.

	Each node in the tree corresponds directly to a node in a corresponding
	TestPlan, accessible via the 'planNode' field.

	TestResults objects are produced by TestRunner using TestSession as state.
]]

local TestEnum = require(script.Parent.TestEnum)

local STATUS_SYMBOLS = {
	[TestEnum.TestStatus.Success] = "+",
	[TestEnum.TestStatus.Failure] = "-",
	[TestEnum.TestStatus.Skipped] = "~"
}

local TestResults = {}

TestResults.__index = TestResults

--[[
	Create a new TestResults tree that's linked to the given TestPlan.
]]
function TestResults.new(plan)
	local self = {
		successCount = 0,
		failureCount = 0,
		skippedCount = 0,
		planNode = plan,
		children = {},
		errors = {}
	}

	setmetatable(self, TestResults)

	return self
end

--[[
	Create a new result node that can be inserted into a TestResult tree.
]]
function TestResults.createNode(planNode)
	local node = {
		planNode = planNode,
		children = {},
		errors = {},
		status = nil
	}

	return node
end

--[[
	Visit all test result nodes, depth-first.
]]
function TestResults:visitAllNodes(callback, root)
	root = root or self

	for _, child in ipairs(root.children) do
		callback(child)

		self:visitAllNodes(callback, child)
	end
end

--[[
	Creates a debug visualization of the test results.
]]
function TestResults:visualize(root, level)
	root = root or self
	level = level or 0

	local buffer = {}

	for _, child in ipairs(root.children) do
		if child.planNode.type == TestEnum.NodeType.It then
			local symbol = STATUS_SYMBOLS[child.status] or "?"
			local str = ("%s[%s] %s"):format(
				(" "):rep(3 * level),
				symbol,
				child.planNode.phrase
			)

			if child.messages and #child.messages > 0 then
				str = str .. "\n " .. (" "):rep(3 * level) .. table.concat(child.messages, "\n " .. (" "):rep(3 * level))
			end

			table.insert(buffer, str)
		else
			local str = ("%s%s"):format(
				(" "):rep(3 * level),
				child.planNode.phrase or ""
			)

			if child.status then
				str = str .. (" (%s)"):format(child.status)
			end

			table.insert(buffer, str)

			if #child.children > 0 then
				local text = self:visualize(child, level + 1)
				table.insert(buffer, text)
			end
		end
	end

	return table.concat(buffer, "\n")
end

return TestResults</string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="16">
        <Properties>
          <string name="Name">TestRunner</string>
          <string name="Source"><![CDATA[--[[
	Contains the logic to run a test plan and gather test results from it.

	TestRunner accepts a TestPlan object, executes the planned tests, and
	produces a TestResults object. While the tests are running, the system's
	state is contained inside a TestSession object.
]]

local TestEnum = require(script.Parent.TestEnum)
local TestSession = require(script.Parent.TestSession)
local LifecycleHooks = require(script.Parent.LifecycleHooks)

local RUNNING_GLOBAL = "__TESTEZ_RUNNING_TEST__"

local TestRunner = {
	environment = {}
}

local function wrapExpectContextWithPublicApi(expectationContext)
	return setmetatable({
		extend = function(...)
			expectationContext:extend(...)
		end,
	}, {
		__call = function(_self, ...)
			return expectationContext:startExpectationChain(...)
		end,
	})
end

--[[
	Runs the given TestPlan and returns a TestResults object representing the
	results of the run.
]]
function TestRunner.runPlan(plan)
	local session = TestSession.new(plan)
	local lifecycleHooks = LifecycleHooks.new()

	local exclusiveNodes = plan:findNodes(function(node)
		return node.modifier == TestEnum.NodeModifier.Focus
	end)

	session.hasFocusNodes = #exclusiveNodes > 0

	TestRunner.runPlanNode(session, plan, lifecycleHooks)

	return session:finalize()
end

--[[
	Run the given test plan node and its descendants, using the given test
	session to store all of the results.
]]
function TestRunner.runPlanNode(session, planNode, lifecycleHooks)
	local function runCallback(callback, messagePrefix)
		local success = true
		local errorMessage
		-- Any code can check RUNNING_GLOBAL to fork behavior based on
		-- whether a test is running. We use this to avoid accessing
		-- protected APIs; it's a workaround that will go away someday.
		_G[RUNNING_GLOBAL] = true

		messagePrefix = messagePrefix or ""

		local testEnvironment = getfenv(callback)

		for key, value in pairs(TestRunner.environment) do
			testEnvironment[key] = value
		end

		testEnvironment.fail = function(message)
			if message == nil then
				message = "fail() was called."
			end

			success = false
			errorMessage = messagePrefix .. debug.traceback(tostring(message), 2)
		end

		testEnvironment.expect = wrapExpectContextWithPublicApi(session:getExpectationContext())

		local context = session:getContext()

		local nodeSuccess, nodeResult = xpcall(
			function()
				callback(context)
			end,
			function(message)
				return messagePrefix .. debug.traceback(tostring(message), 2)
			end
		)

		-- If a node threw an error, we prefer to use that message over
		-- one created by fail() if it was set.
		if not nodeSuccess then
			success = false
			errorMessage = nodeResult
		end

		_G[RUNNING_GLOBAL] = nil

		return success, errorMessage
	end

	local function runNode(childPlanNode)
		-- Errors can be set either via `error` propagating upwards or
		-- by a test calling fail([message]).

		for _, hook in ipairs(lifecycleHooks:getBeforeEachHooks()) do
			local success, errorMessage = runCallback(hook, "beforeEach hook: ")
			if not success then
				return false, errorMessage
			end
		end

		local testSuccess, testErrorMessage = runCallback(childPlanNode.callback)

		for _, hook in ipairs(lifecycleHooks:getAfterEachHooks()) do
			local success, errorMessage = runCallback(hook, "afterEach hook: ")
			if not success then
				if not testSuccess then
					return false, testErrorMessage .. "\nWhile cleaning up the failed test another error was found:\n" .. errorMessage
				end
				return false, errorMessage
			end
		end

		if not testSuccess then
			return false, testErrorMessage
		end

		return true, nil
	end

	lifecycleHooks:pushHooksFrom(planNode)

	local halt = false
	for _, hook in ipairs(lifecycleHooks:getBeforeAllHooks()) do
		local success, errorMessage = runCallback(hook, "beforeAll hook: ")
		if not success then
			session:addDummyError("beforeAll", errorMessage)
			halt = true
		end
	end

	if not halt then
		for _, childPlanNode in ipairs(planNode.children) do
			if childPlanNode.type == TestEnum.NodeType.It then
				session:pushNode(childPlanNode)
				if session:shouldSkip() then
					session:setSkipped()
				else
					local success, errorMessage = runNode(childPlanNode)

					if success then
						session:setSuccess()
					else
						session:setError(errorMessage)
					end
				end
				session:popNode()
			elseif childPlanNode.type == TestEnum.NodeType.Describe then
				session:pushNode(childPlanNode)
				TestRunner.runPlanNode(session, childPlanNode, lifecycleHooks)

				-- Did we have an error trying build a test plan?
				if childPlanNode.loadError then
					local message = "Error during planning: " .. childPlanNode.loadError
					session:setError(message)
				else
					session:setStatusFromChildren()
				end
				session:popNode()
			end
		end
	end

	for _, hook in ipairs(lifecycleHooks:getAfterAllHooks()) do
		local success, errorMessage = runCallback(hook, "afterAll hook: ")
		if not success then
			session:addDummyError("afterAll", errorMessage)
		end
	end

	lifecycleHooks:popHooks()
end

return TestRunner
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="17">
        <Properties>
          <string name="Name">TestSession</string>
          <string name="Source"><![CDATA[--[[
	Represents the state relevant while executing a test plan.

	Used by TestRunner to produce a TestResults object.

	Uses the same tree building structure as TestPlanBuilder; TestSession keeps
	track of a stack of nodes that represent the current path through the tree.
]]

local TestEnum = require(script.Parent.TestEnum)
local TestResults = require(script.Parent.TestResults)
local Context = require(script.Parent.Context)
local ExpectationContext = require(script.Parent.ExpectationContext)

local TestSession = {}

TestSession.__index = TestSession

--[[
	Create a TestSession related to the given TestPlan.

	The resulting TestResults object will be linked to this TestPlan.
]]
function TestSession.new(plan)
	local self = {
		results = TestResults.new(plan),
		nodeStack = {},
		contextStack = {},
		expectationContextStack = {},
		hasFocusNodes = false
	}

	setmetatable(self, TestSession)

	return self
end

--[[
	Calculate success, failure, and skipped test counts in the tree at the
	current point in the execution.
]]
function TestSession:calculateTotals()
	local results = self.results

	results.successCount = 0
	results.failureCount = 0
	results.skippedCount = 0

	results:visitAllNodes(function(node)
		local status = node.status
		local nodeType = node.planNode.type

		if nodeType == TestEnum.NodeType.It then
			if status == TestEnum.TestStatus.Success then
				results.successCount = results.successCount + 1
			elseif status == TestEnum.TestStatus.Failure then
				results.failureCount = results.failureCount + 1
			elseif status == TestEnum.TestStatus.Skipped then
				results.skippedCount = results.skippedCount + 1
			end
		end
	end)
end

--[[
	Gathers all of the errors reported by tests and puts them at the top level
	of the TestResults object.
]]
function TestSession:gatherErrors()
	local results = self.results

	results.errors = {}

	results:visitAllNodes(function(node)
		if #node.errors > 0 then
			for _, message in ipairs(node.errors) do
				table.insert(results.errors, message)
			end
		end
	end)
end

--[[
	Calculates test totals, verifies the tree is valid, and returns results.
]]
function TestSession:finalize()
	if #self.nodeStack ~= 0 then
		error("Cannot finalize TestResults with nodes still on the stack!", 2)
	end

	self:calculateTotals()
	self:gatherErrors()

	return self.results
end

--[[
	Create a new test result node and push it onto the navigation stack.
]]
function TestSession:pushNode(planNode)
	local node = TestResults.createNode(planNode)
	local lastNode = self.nodeStack[#self.nodeStack] or self.results
	table.insert(lastNode.children, node)
	table.insert(self.nodeStack, node)

	local lastContext = self.contextStack[#self.contextStack]
	local context = Context.new(lastContext)
	table.insert(self.contextStack, context)

	local lastExpectationContext = self.expectationContextStack[#self.expectationContextStack]
	local expectationContext = ExpectationContext.new(lastExpectationContext)
	table.insert(self.expectationContextStack, expectationContext)
end

--[[
	Pops a node off of the navigation stack.
]]
function TestSession:popNode()
	assert(#self.nodeStack > 0, "Tried to pop from an empty node stack!")
	table.remove(self.nodeStack, #self.nodeStack)
	table.remove(self.contextStack, #self.contextStack)
	table.remove(self.expectationContextStack, #self.expectationContextStack)
end

--[[
	Gets the Context object for the current node.
]]
function TestSession:getContext()
	assert(#self.contextStack > 0, "Tried to get context from an empty stack!")
	return self.contextStack[#self.contextStack]
end


function TestSession:getExpectationContext()
	assert(#self.expectationContextStack > 0, "Tried to get expectationContext from an empty stack!")
	return self.expectationContextStack[#self.expectationContextStack]
end

--[[
	Tells whether the current test we're in should be skipped.
]]
function TestSession:shouldSkip()
	-- If our test tree had any exclusive tests, then normal tests are skipped!
	if self.hasFocusNodes then
		for i = #self.nodeStack, 1, -1 do
			local node = self.nodeStack[i]

			-- Skipped tests are still skipped
			if node.planNode.modifier == TestEnum.NodeModifier.Skip then
				return true
			end

			-- Focused tests are the only ones that aren't skipped
			if node.planNode.modifier == TestEnum.NodeModifier.Focus then
				return false
			end
		end

		return true
	else
		for i = #self.nodeStack, 1, -1 do
			local node = self.nodeStack[i]

			if node.planNode.modifier == TestEnum.NodeModifier.Skip then
				return true
			end
		end
	end

	return false
end

--[[
	Set the current node's status to Success.
]]
function TestSession:setSuccess()
	assert(#self.nodeStack > 0, "Attempting to set success status on empty stack")
	self.nodeStack[#self.nodeStack].status = TestEnum.TestStatus.Success
end

--[[
	Set the current node's status to Skipped.
]]
function TestSession:setSkipped()
	assert(#self.nodeStack > 0, "Attempting to set skipped status on empty stack")
	self.nodeStack[#self.nodeStack].status = TestEnum.TestStatus.Skipped
end

--[[
	Set the current node's status to Failure and adds a message to its list of
	errors.
]]
function TestSession:setError(message)
	assert(#self.nodeStack > 0, "Attempting to set error status on empty stack")
	local last = self.nodeStack[#self.nodeStack]
	last.status = TestEnum.TestStatus.Failure
	table.insert(last.errors, message)
end

--[[
	Add a dummy child node to the current node to hold the given error. This
	allows an otherwise empty describe node to report an error in a more natural
	way.
]]
function TestSession:addDummyError(phrase, message)
	self:pushNode({type = TestEnum.NodeType.It, phrase = phrase})
	self:setError(message)
	self:popNode()
	self.nodeStack[#self.nodeStack].status = TestEnum.TestStatus.Failure
end

--[[
	Set the current node's status based on that of its children. If all children
	are skipped, mark it as skipped. If any are fails, mark it as failed.
	Otherwise, mark it as success.
]]
function TestSession:setStatusFromChildren()
	assert(#self.nodeStack > 0, "Attempting to set status from children on empty stack")

	local last = self.nodeStack[#self.nodeStack]
	local status = TestEnum.TestStatus.Success
	local skipped = true

	-- If all children were skipped, then we were skipped
	-- If any child failed, then we failed!
	for _, child in ipairs(last.children) do
		if child.status ~= TestEnum.TestStatus.Skipped then
			skipped = false

			if child.status == TestEnum.TestStatus.Failure then
				status = TestEnum.TestStatus.Failure
			end
		end
	end

	if skipped then
		status = TestEnum.TestStatus.Skipped
	end

	last.status = status
end

return TestSession
]]></string>
        </Properties>
      </Item>
    </Item>
    <Item class="ModuleScript" referent="18">
      <Properties>
        <string name="Name">lib</string>
        <string name="Source"><![CDATA[return {
	Factory = script.Factory,
	Singleton = script.Singleton,
	Strategy = script.Strategy,
	Observer = script.Observer,
	State = script.State,
	Command = script.Command,
	Chain = script.Chain,
}
]]></string>
      </Properties>
      <Item class="ModuleScript" referent="19">
        <Properties>
          <string name="Name">Chain</string>
          <string name="Source"><![CDATA[--[[
    Chain class
    HawDevelopment
    26/06/2021
--]]

local t = require(script.Parent.t)

---@class Chain
local Chain = {}
Chain.__index = Chain

--- Creates a new Chain
---@param handles table<string | number, fun(any): boolean> | nil
---@param shouldWarn boolean
function Chain.new(chain, shouldWarn)
	assert(t.union(t.table, t.none)(chain))
	chain = chain or {}

	for index, val in pairs(chain) do
		if type(index) ~= "number" then
			error("Chain indexes can only be numbers!", 2)
		end

		if type(val) ~= "function" then
			error("Chain values can only be functions", 2)
		end
	end

	local self = setmetatable({}, Chain)

	self.__chain = chain

	if shouldWarn then
		self.__warn = shouldWarn
	else
		self.__warn = false
	end

	return self
end

--- Sets the current Chain
---@param handler fun(any): boolean
---@param index number | nil @Index of handler in chain, defaults to last index plus one
function Chain:add(handler, index)
	assert(t.callback(handler))
	assert(t.union(t.number, t.none)(index))
	index = index or #self.__chain + 1

	table.insert(self.__chain, index, handler)
	return self
end

--- Execures the current Chain
---@vararg any
---@return boolean
function Chain:execute(...)
	for i, handle in ipairs(self.__chain) do
		local ret, err = handle(...)

		if ret == false then
			if err and self.__warn then
				warn(err)
			else
				warn(("Error cought in chain on index %s"):format(i))
			end

			return ret
		end
	end

	return true
end

Chain.__index = function(self, index)
	if type(Chain[index]) == "function" then
		return function(...)
			return Chain[index](self, ...)
		end
	else
		return Chain[index]
	end
end
Chain.__call = function(self, ...)
	return self.fire(...)
end

return setmetatable(Chain, {
	__call = function(self, ...)
		return self.new(...)
	end,
})
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="20">
        <Properties>
          <string name="Name">Command</string>
          <string name="Source"><![CDATA[--[[
    Command class
    HawDevelopment
    26/06/2021
--]]

local t = require(script.Parent.t)
local Observer = require(script.Parent.Observer)

local t_type = t.union(t.string, t.none)

---@class Command
local Command = {}
Command.__index = Command

--- Creates a new command
---@param commands table<string, fun(any): any> | nil
function Command.new(commands)
	assert(t.union(t.table, t.none)(commands))
	local self = setmetatable({}, Command)

	self.__commands = commands or {}

	return self
end

--- Adds a new command
---@param command fun(any): any
---@param name string
function Command:add(command, name)
	assert(t.callback(command))
	assert(t.string(name))
	self.__commands[name] = command
end

--- Executes command with given name
---@param name string
---@vararg any
---@return any
function Command:execute(name, ...)
	assert(t.string(name))
	assert(self.__commands[name] ~= nil, ("Command with name %s could not be found"):format(name))

	return self.__commands[name](...)
end

Command.__index = function(self, index)
	if type(Command[index]) == "function" then
		return function(...)
			return Command[index](self, ...)
		end
	else
		return Command[index]
	end
end
Command.__call = function(self, ...)
	return self.set(...)
end

return setmetatable(Command, {
	__call = function(self, ...)
		return self.new(...)
	end,
})
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="21">
        <Properties>
          <string name="Name">Factory</string>
          <string name="Source"><![CDATA[--[[
    Factory Class
    HawDevelopment
    11/06/2021
--]]
local t = require(script.Parent.t)

---@alias Rule fun(type: any): boolean
---@class Factory
local Factory = {}

---@module Types
Factory.Type = require(script.Parent.Types)

---@type fun(num: number): Argument
Factory.Argument = function(num)
	---@class Argument
	local self = newproxy(true)

	local wrapStr = ("Argument(%d)"):format(num)

	getmetatable(self).__call = function()
		return num
	end
	getmetatable(self).__tostring = function()
		return wrapStr
	end

	return self
end

local function Copy(tab)
	local newtab = {}
	for index, value in pairs(tab) do
		newtab[index] = value
	end
	return newtab
end

--- Creates a new factory
---@param enum table<string, number> @Table with name as indexes and number as values
---@param factories table<string, function> @Table with name as indexes and constructor as values
---@return Factory
function Factory.new(enum, factories)
	assert(t.table(enum))
	assert(t.table(factories))

	-- We want to error if enums doesnt line up with factories
	do
		for index, _ in pairs(enum) do
			if type(index) == "number" then
				error(("Index %s in enum isnt of type string, enum indexes must be strings"):format(index))
			end

			if not factories[index] then
				error(("Index %s in enum doesnt have a corresponding factory"):format(tostring(index)), 2)
			end
		end
	end

	local self = setmetatable({}, Factory)

	self.__factories = Copy(factories)
	self.__enum = Copy(enum)

	return self
end

--- Create a class with type and arguments
---@param type number | string @Type with corresponding name in Enum list
---@vararg any
---@return table
function Factory:create(type, ...)
	assert(t.union(t.string, t.number)(type))
	local args = table.pack(...)

	-- Get name from type
	local enumName

	for name, enumType in pairs(self.__enum) do
		if enumType == type or name == type then
			enumName = name
			break
		end
	end

	assert(enumName, "Type has no corresponding Enum")
	assert(self.__factories[enumName], "Enum has no corresponding constructer")

	-- Rules
	if self.__rule then
		for index, value in ipairs(args) do
			if self.__rule[index](value) == false then
				error(
					("Argument %d in function with type %s, doesnt comply with rules"):format(index, typeof(value)),
					3
				)
			end
		end
	end

	-- Create class
	local class = {}

	-- Base
	if self.__base then
		for index, argument in pairs(self.__base) do
			if tostring(argument):match("Argument%(%d-%)") then
				class[index] = args[tonumber(argument())]
			else
				class[index] = argument
			end
		end
	end

	self.__factories[enumName](class, ...)
	return class
end

--- Sets the rule class types
---@param types table<any, Rule>
function Factory:rule(types)
	assert(t.union(t.table, t.none)(types))

	if type(types) == "table" then
		assert(t.values(t.callback)(types))

		self.__rule = Copy(types)
	else
		self.__rule = nil
	end
end

--- Sets the base of the class
---@param base table<any, Argument> @The arguments with corresponding class indexes
function Factory:base(base)
	assert(t.union(t.table, t.none)(base))

	if type(base) == "table" then
		-- Baseic error handling
		for index, value in pairs(base) do
			if not (type(index) == "number" or type(index) == "string") then
				error(("Index %s in base, isnt of type string or number"):format(index), 3)
			end
		end

		self.__base = Copy(base)
	else
		self.__base = nil
	end
end

-- Metatables stuff
Factory.__index = function(self, index)
	if type(Factory[index]) == "function" then
		return function(...)
			return Factory[index](self, ...)
		end
	else
		return Factory[index]
	end
end
Factory.__call = function(self, ...)
	return self.create(...)
end

return setmetatable(Factory, {
	__call = function(_, ...)
		return _.new(...)
	end,
})
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="22">
        <Properties>
          <string name="Name">Observer</string>
          <string name="Source"><![CDATA[--[[
    Observer
    HawDevelopment
    24/06/2021
--]]

local t = require(script.Parent.t)
local symbol = require(script.Parent.Symbol)

---@module Observer
---@class Observer
local Observer = {}
Observer.__index = Observer

--- Creates a new Observer
---@param listeners nil | table | "nil" | "{}" @Start listeners
---@return Observer
function Observer.new(listeners)
	assert(t.union(t.table, t.none)(listeners))

	local self = setmetatable({}, Observer)

	self.__listeners = listeners or {}

	return self
end

--- Adds a handler / listener to observer
---@param handler fun(any) | "function(arg1, arg2) end"
---@param type string
---@return fun() @Function that when called whil remove handler from its index
function Observer:add(handler, type)
	assert(t.callback(handler))
	assert(t.union(t.string, t.none)(type))

	local tab = self.__listeners
	if type then
		if not self.__listeners[type] then
			self.__listeners[type] = {}
		end

		tab = self.__listeners[type]
	end

	local index = #tab + 1
	tab[index] = handler

	return function()
		tab[index] = nil
	end
end

--- Fires observer, calling every listener
---@param type string | nil
---@vararg any
---@return Observer
function Observer:fire(type, ...)
	local tab = self.__listeners
	if type and string.lower(type) ~= "all" then
		if not self.__listeners[type] then
			self.__listeners[type] = {}
		end

		tab = self.__listeners[type]
	end

	for _, fun in pairs(tab) do
		fun(...)
	end

	return self
end

Observer.__index = function(self, index)
	if type(Observer[index]) == "function" then
		return function(...)
			return Observer[index](self, ...)
		end
	else
		return Observer[index]
	end
end
Observer.__call = function(self, ...)
	return self.fire(...)
end

return setmetatable(Observer, {
	__call = function(self, ...)
		return self.new(...)
	end,
})
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="23">
        <Properties>
          <string name="Name">Singleton</string>
          <string name="Source"><![CDATA[--[[
    Singleton Class
    HawDevelopment
    14/06/2021
--]]

local t = require(script.Parent.t)

---class @Singleton
local Singleton = {}
Singleton.__index = Singleton

--- Creates a new singleton
---@param handle fun() | table
---@return Singleton
function Singleton.new(handle)
	assert(t.union(t.callback, t.table)(handle))

	if type(handle) == "table" then
		assert(type(handle.new) == "function", "Expected class, got table")
	end

	local self = setmetatable({}, Singleton)

	self.__creator = handle

	return self
end

--- Gets or Creates object from the handler
---@return any
function Singleton:get()
	if not self.__obj then
		local ret

		if type(self.__creator) == "table" then
			ret = self.__creator.new()
		else
			ret = self.__creator()
		end

		self.__obj = ret
	end

	return self.__obj
end

--- Destroys the current set object
function Singleton:destroy()
	if self.__obj then
		if type(self.__obj) == "table" and self.__obj.Destroy then
			self.__obj:Destroy()
		end
		self.__obj = nil
	end
end

Singleton.__index = function(self, index)
	if type(Singleton[index]) == "function" then
		return function(...)
			return Singleton[index](self, ...)
		end
	else
		return Singleton[index]
	end
end
Singleton.__call = function(self, ...)
	return self.get(...)
end

return setmetatable(Singleton, {
	__call = function(self, ...)
		return self.new(...)
	end,
})
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="24">
        <Properties>
          <string name="Name">State</string>
          <string name="Source"><![CDATA[--[[
    State class
    HawDevelopment
    26/06/2021
--]]

local t = require(script.Parent.t)
local Observer = require(script.Parent.Observer)

local t_type = t.union(t.string, t.none)

---@class State
local State = {}
State.__index = State

--- Creates a new state
---@param default any | nil
---@param observer Observer | nil
function State.new(default, observer)
	assert(t.union(t.table, t.none)(observer))
	local self = setmetatable({}, State)

	self.__state = default
	self.__observer = observer or Observer.new()

	return self
end

--- Sets state observer
---@param observer Observer
function State:observer(observer)
	assert(t.table(observer))
	self.__observer = observer
end

--- Adds a callback to state obsever
---@param callback fun(state: any) | "function(state) end"
---@param type string | nil
function State:bind(callback, type)
	assert(t.callback(callback))
	assert(t_type(type))
	self.__observer.add(callback, type)
end

---@return table
local function Mix(tab1, tab2)
	for i, v in pairs(tab2) do
		tab1[i] = b
	end
	return tab1
end

--- Sets the state
---@param state any
---@type string | nil
function State:set(state, type)
	assert(t.any(state))
	assert(t_type(type))

	if typeof(state) == "table" then
		setmetatable(
			state,
			Mix(getmetatable(state) or {}, {
				__newindex = function()
					error("State is read only!", 2)
				end,
			})
		)
	end

	self.__observer.fire(type or "all", state)
	self.__state = state
end

--- Gets the state
---@return any
function State:get()
	return self.__state
end

State.__tostring = function(self)
	return tostring(self.__state)
end

State.__index = function(self, index)
	if type(State[index]) == "function" then
		return function(...)
			return State[index](self, ...)
		end
	else
		return State[index]
	end
end
State.__call = function(self, ...)
	return self.set(...)
end

return setmetatable(State, {
	__call = function(self, ...)
		return self.new(...)
	end,
})
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="25">
        <Properties>
          <string name="Name">Strategy</string>
          <string name="Source"><![CDATA[--[[
    Strategy class
    HawDevelopment
    23/06/2021
--]]
local t = require(script.Parent.t)

---@class Strategy
local Strategy = {}
Strategy.__index = Strategy

--- Creates a new Strategy
---@param handles table<string | number, fun(any): any>
---@param start number | nil
function Strategy.new(handles, start)
	assert(t.table(handles))

	local self = setmetatable({}, Strategy)

	self.__handles = handles or {}
	if start then
		self.__strategy = handles[start]
	else
		_, self.__strategy = next(handles)
	end

	return self
end

--- Adds a new handler to the strategy
---@param handler fun(any): any
---@param name string
function Strategy:add(handler, name)
	assert(t.callback(handler))
	assert(t.string(name))

	self.__handles[name] = handler
end
--- Sets the current Strategy
---@param name string @The name of strategy to set
---@return nil
function Strategy:set(name)
	assert(t.union(t.string, t.table)(name))

	-- For state objects
	name = tostring(name)

	if not self.__handles[name] then
		return error(("Strategy named %s could not be found"):format(tostring(name)), 2)
	end

	self.__strategy = self.__handles[name]
end

--- Calls the current set strategy, of none is found it errors
---@vararg any
---@return any
function Strategy:call(...)
	assert(self.__strategy ~= nil, "Strategy not set")

	return self.__strategy(...)
end

Strategy.__index = function(self, index)
	if type(Strategy[index]) == "function" then
		return function(...)
			return Strategy[index](self, ...)
		end
	else
		return Strategy[index]
	end
end
Strategy.__call = function(self, ...)
	return self.call(...)
end

return setmetatable(Strategy, {
	__call = function(self, ...)
		return self.new(...)
	end,
})
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="26">
        <Properties>
          <string name="Name">Symbol</string>
          <string name="Source"><![CDATA[--[[
    Symbol Class
    HawDevelopment
    24/06/2021
--]]

---@class Symbol
local Symbol = {}

--- Creates a new symbol
---@param name string @The name of the symbol
---@return Symbol
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

--- Creates an unnamed symbol
---@return Symbol
function Symbol.unnamed()
	local self = newproxy(true)

	getmetatable(self).__tostring = function()
		return "Unnamed Symbol"
	end

	return self
end

return Symbol
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="27">
        <Properties>
          <string name="Name">Types</string>
          <string name="Source"><![CDATA[--[[
    Types
    HawDevelopment
    12/06/2021
    
    Design from osyrisrblx/t
--]]

---@module Types
local Types = {}

local function Primitive(typeName)
	return function(value)
		local valueType = type(value)
		if valueType == typeName then
			return true
		else
			return false
		end
	end
end

Types["string"] = Primitive("string")
Types["boolean"] = Primitive("boolean")
Types["number"] = Primitive("number")
Types["nil"] = Primitive("nil")
Types["table"] = Primitive("table")
Types["thread"] = Primitive("thread")
Types["function"] = Primitive("function")
Types["userdata"] = Primitive("userdata")
Types["vector"] = Primitive("vector")

return Types
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="28">
        <Properties>
          <string name="Name">t</string>
          <string name="Source"><![CDATA[--[[
	t: a runtime typechecker for Roblox
	HawDevelopment
	24/06/2021
	
	https://github.com/osyrisrblx/t
--]]

-- regular lua compatibility
local typeof = typeof or type

local function primitive(typeName)
	return function(value)
		local valueType = typeof(value)
		if valueType == typeName then
			return true
		else
			return false, string.format("%s expected, got %s", typeName, valueType)
		end
	end
end

local t = {}

--[[**
	matches any type except nil

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.any(value)
	if value ~= nil then
		return true
	else
		return false, "any expected, got nil"
	end
end

--Lua primitives

--[[**
	ensures Lua primitive boolean type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.boolean = primitive("boolean")

--[[**
	ensures Lua primitive thread type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.thread = primitive("thread")

--[[**
	ensures Lua primitive callback type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.callback = primitive("function")
t["function"] = t.callback

--[[**
	ensures Lua primitive none type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.none = primitive("nil")
t["nil"] = t.none

--[[**
	ensures Lua primitive string type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.string = primitive("string")

--[[**
	ensures Lua primitive table type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.table = primitive("table")

--[[**
	ensures Lua primitive userdata type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.userdata = primitive("userdata")

--[[**
	ensures value is a number and non-NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.number(value)
	local valueType = typeof(value)
	if valueType == "number" then
		if value == value then
			return true
		else
			return false, "unexpected NaN value"
		end
	else
		return false, string.format("number expected, got %s", valueType)
	end
end

--[[**
	ensures value is NaN

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.nan(value)
	if value ~= value then
		return true
	else
		return false, "unexpected non-NaN value"
	end
end

-- roblox types

--[[**
	ensures Roblox Axes type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Axes = primitive("Axes")

--[[**
	ensures Roblox BrickColor type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.BrickColor = primitive("BrickColor")

--[[**
	ensures Roblox CFrame type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.CFrame = primitive("CFrame")

--[[**
	ensures Roblox Color3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Color3 = primitive("Color3")

--[[**
	ensures Roblox ColorSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequence = primitive("ColorSequence")

--[[**
	ensures Roblox ColorSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.ColorSequenceKeypoint = primitive("ColorSequenceKeypoint")

--[[**
	ensures Roblox DockWidgetPluginGuiInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.DockWidgetPluginGuiInfo = primitive("DockWidgetPluginGuiInfo")

--[[**
	ensures Roblox Faces type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Faces = primitive("Faces")

--[[**
	ensures Roblox Instance type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Instance = primitive("Instance")

--[[**
	ensures Roblox NumberRange type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberRange = primitive("NumberRange")

--[[**
	ensures Roblox NumberSequence type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequence = primitive("NumberSequence")

--[[**
	ensures Roblox NumberSequenceKeypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.NumberSequenceKeypoint = primitive("NumberSequenceKeypoint")

--[[**
	ensures Roblox PathWaypoint type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PathWaypoint = primitive("PathWaypoint")

--[[**
	ensures Roblox PhysicalProperties type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.PhysicalProperties = primitive("PhysicalProperties")

--[[**
	ensures Roblox Random type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Random = primitive("Random")

--[[**
	ensures Roblox Ray type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Ray = primitive("Ray")

--[[**
	ensures Roblox Rect type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Rect = primitive("Rect")

--[[**
	ensures Roblox Region3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3 = primitive("Region3")

--[[**
	ensures Roblox Region3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Region3int16 = primitive("Region3int16")

--[[**
	ensures Roblox TweenInfo type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.TweenInfo = primitive("TweenInfo")

--[[**
	ensures Roblox UDim type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim = primitive("UDim")

--[[**
	ensures Roblox UDim2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.UDim2 = primitive("UDim2")

--[[**
	ensures Roblox Vector2 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector2 = primitive("Vector2")

--[[**
	ensures Roblox Vector3 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3 = primitive("Vector3")

--[[**
	ensures Roblox Vector3int16 type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Vector3int16 = primitive("Vector3int16")

-- roblox enum types

--[[**
	ensures Roblox Enum type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.Enum = primitive("Enum")

--[[**
	ensures Roblox EnumItem type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.EnumItem = primitive("EnumItem")

--[[**
	ensures Roblox RBXScriptSignal type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptSignal = primitive("RBXScriptSignal")

--[[**
	ensures Roblox RBXScriptConnection type

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
t.RBXScriptConnection = primitive("RBXScriptConnection")

--[[**
	ensures value is a given literal value

	@param literal The literal to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.literal(...)
	local size = select("#", ...)
	if size == 1 then
		local literal = ...
		return function(value)
			if value ~= literal then
				return false, string.format("expected %s, got %s", tostring(literal), tostring(value))
			end

			return true
		end
	else
		local literals = {}
		for i = 1, size do
			local value = select(i, ...)
			literals[i] = t.literal(value)
		end

		return t.union(table.unpack(literals, 1, size))
	end
end

--[[**
	DEPRECATED
	Please use t.literal
**--]]
t.exactly = t.literal

--[[**
	Returns a t.union of each key in the table as a t.literal

	@param keyTable The table to get keys from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.keyOf(keyTable)
	local keys = {}
	local length = 0
	for key in pairs(keyTable) do
		length = length + 1
		keys[length] = key
	end

	return t.literal(table.unpack(keys, 1, length))
end

--[[**
	Returns a t.union of each value in the table as a t.literal

	@param valueTable The table to get values from

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.valueOf(valueTable)
	local values = {}
	local length = 0
	for _, value in pairs(valueTable) do
		length = length + 1
		values[length] = value
	end

	return t.literal(table.unpack(values, 1, length))
end

--[[**
	ensures value is an integer

	@param value The value to check against

	@returns True iff the condition is satisfied, false otherwise
**--]]
function t.integer(value)
	local success, errMsg = t.number(value)
	if not success then
		return false, errMsg or ""
	end

	if value % 1 == 0 then
		return true
	else
		return false, string.format("integer expected, got %s", value)
	end
end

--[[**
	ensures value is a number where min <= value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMin(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value >= min then
			return true
		else
			return false, string.format("number >= %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value <= max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMax(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg
		end

		if value <= max then
			return true
		else
			return false, string.format("number <= %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where min < value

	@param min The minimum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMinExclusive(min)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if min < value then
			return true
		else
			return false, string.format("number > %s expected, got %s", min, value)
		end
	end
end

--[[**
	ensures value is a number where value < max

	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberMaxExclusive(max)
	return function(value)
		local success, errMsg = t.number(value)
		if not success then
			return false, errMsg or ""
		end

		if value < max then
			return true
		else
			return false, string.format("number < %s expected, got %s", max, value)
		end
	end
end

--[[**
	ensures value is a number where value > 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberPositive = t.numberMinExclusive(0)

--[[**
	ensures value is a number where value < 0

	@returns A function that will return true iff the condition is passed
**--]]
t.numberNegative = t.numberMaxExclusive(0)

--[[**
	ensures value is a number where min <= value <= max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrained(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMin(min)
	local maxCheck = t.numberMax(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value is a number where min < value < max

	@param min The minimum to use
	@param max The maximum to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.numberConstrainedExclusive(min, max)
	assert(t.number(min))
	assert(t.number(max))
	local minCheck = t.numberMinExclusive(min)
	local maxCheck = t.numberMaxExclusive(max)

	return function(value)
		local minSuccess, minErrMsg = minCheck(value)
		if not minSuccess then
			return false, minErrMsg or ""
		end

		local maxSuccess, maxErrMsg = maxCheck(value)
		if not maxSuccess then
			return false, maxErrMsg or ""
		end

		return true
	end
end

--[[**
	ensures value matches string pattern

	@param string pattern to check against

	@returns A function that will return true iff the condition is passed
**--]]
function t.match(pattern)
	assert(t.string(pattern))
	return function(value)
		local stringSuccess, stringErrMsg = t.string(value)
		if not stringSuccess then
			return false, stringErrMsg
		end

		if string.match(value, pattern) == nil then
			return false, string.format("%q failed to match pattern %q", value, pattern)
		end

		return true
	end
end

--[[**
	ensures value is either nil or passes check

	@param check The check to use

	@returns A function that will return true iff the condition is passed
**--]]
function t.optional(check)
	assert(t.callback(check))
	return function(value)
		if value == nil then
			return true
		end

		local success, errMsg = check(value)
		if success then
			return true
		else
			return false, string.format("(optional) %s", errMsg or "")
		end
	end
end

--[[**
	matches given tuple against tuple type definition

	@param ... The type definition for the tuples

	@returns A function that will return true iff the condition is passed
**--]]
function t.tuple(...)
	local checks = { ... }
	return function(...)
		local args = { ... }
		for i, check in ipairs(checks) do
			local success, errMsg = check(args[i])
			if success == false then
				return false, string.format("Bad tuple index #%s:\n\t%s", i, errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all keys in given table pass check

	@param check The function to use to check the keys

	@returns A function that will return true iff the condition is passed
**--]]
function t.keys(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key in pairs(value) do
			local success, errMsg = check(key)
			if success == false then
				return false, string.format("bad key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures all values in given table pass check

	@param check The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.values(check)
	assert(t.callback(check))
	return function(value)
		local tableSuccess, tableErrMsg = t.table(value)
		if tableSuccess == false then
			return false, tableErrMsg or ""
		end

		for key, val in pairs(value) do
			local success, errMsg = check(val)
			if success == false then
				return false, string.format("bad value for key %s:\n\t%s", tostring(key), errMsg or "")
			end
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass keyCheck and all values pass valueCheck

	@param keyCheck The function to use to check the keys
	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.map(keyCheck, valueCheck)
	assert(t.callback(keyCheck))
	assert(t.callback(valueCheck))
	local keyChecker = t.keys(keyCheck)
	local valueChecker = t.values(valueCheck)

	return function(value)
		local keySuccess, keyErr = keyChecker(value)
		if not keySuccess then
			return false, keyErr or ""
		end

		local valueSuccess, valueErr = valueChecker(value)
		if not valueSuccess then
			return false, valueErr or ""
		end

		return true
	end
end

--[[**
	ensures value is a table and all keys pass valueCheck and all values are true

	@param valueCheck The function to use to check the values

	@returns A function that will return true iff the condition is passed
**--]]
function t.set(valueCheck)
	return t.map(valueCheck, t.literal(true))
end

do
	local arrayKeysCheck = t.keys(t.integer)
	--[[**
		ensures value is an array and all values of the array match check

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.array(check)
		assert(t.callback(check))
		local valuesCheck = t.values(check)

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[array] %s", keyErrMsg or "")
			end

			-- # is unreliable for sparse arrays
			-- Count upwards using ipairs to avoid false positives from the behavior of #
			local arraySize = 0

			for _ in ipairs(value) do
				arraySize = arraySize + 1
			end

			for key in pairs(value) do
				if key < 1 or key > arraySize then
					return false, string.format("[array] key %s must be sequential", tostring(key))
				end
			end

			local valueSuccess, valueErrMsg = valuesCheck(value)
			if not valueSuccess then
				return false, string.format("[array] %s", valueErrMsg or "")
			end

			return true
		end
	end

	--[[**
		ensures value is an array of a strict makeup and size

		@param check The check to compare all values with

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictArray(...)
		local valueTypes = { ... }
		assert(t.array(t.callback)(valueTypes))

		return function(value)
			local keySuccess, keyErrMsg = arrayKeysCheck(value)
			if keySuccess == false then
				return false, string.format("[strictArray] %s", keyErrMsg or "")
			end

			-- If there's more than the set array size, disallow
			if #valueTypes < #value then
				return false, string.format("[strictArray] Array size exceeds limit of %d", #valueTypes)
			end

			for idx, typeFn in pairs(valueTypes) do
				local typeSuccess, typeErrMsg = typeFn(value[idx])
				if not typeSuccess then
					return false, string.format("[strictArray] Array index #%d - %s", idx, typeErrMsg)
				end
			end

			return true
		end
	end
end

do
	local callbackArray = t.array(t.callback)
	--[[**
		creates a union type

		@param ... The checks to union

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.union(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				if check(value) then
					return true
				end
			end

			return false, "bad type for union"
		end
	end

	--[[**
		Alias for t.union
	**--]]
	t.some = t.union

	--[[**
		creates an intersection type

		@param ... The checks to intersect

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.intersection(...)
		local checks = { ... }
		assert(callbackArray(checks))

		return function(value)
			for _, check in ipairs(checks) do
				local success, errMsg = check(value)
				if not success then
					return false, errMsg or ""
				end
			end

			return true
		end
	end

	--[[**
		Alias for t.intersection
	**--]]
	t.every = t.intersection
end

do
	local checkInterface = t.map(t.any, t.callback)
	--[[**
		ensures value matches given interface definition

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.interface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			return true
		end
	end

	--[[**
		ensures value matches given interface definition strictly

		@param checkTable The interface definition

		@returns A function that will return true iff the condition is passed
	**--]]
	function t.strictInterface(checkTable)
		assert(checkInterface(checkTable))
		return function(value)
			local tableSuccess, tableErrMsg = t.table(value)
			if tableSuccess == false then
				return false, tableErrMsg or ""
			end

			for key, check in pairs(checkTable) do
				local success, errMsg = check(value[key])
				if success == false then
					return false, string.format("[interface] bad value for %s:\n\t%s", tostring(key), errMsg or "")
				end
			end

			for key in pairs(value) do
				if not checkTable[key] then
					return false, string.format("[interface] unexpected field %q", tostring(key))
				end
			end

			return true
		end
	end
end

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceOf(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if value.ClassName ~= className then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

t.instance = t.instanceOf

--[[**
	ensure value is an Instance and it's ClassName matches the given ClassName by an IsA comparison

	@param className The class name to check for

	@returns A function that will return true iff the condition is passed
**--]]
function t.instanceIsA(className, childTable)
	assert(t.string(className))

	local childrenCheck
	if childTable ~= nil then
		childrenCheck = t.children(childTable)
	end

	return function(value)
		local instanceSuccess, instanceErrMsg = t.Instance(value)
		if not instanceSuccess then
			return false, instanceErrMsg or ""
		end

		if not value:IsA(className) then
			return false, string.format("%s expected, got %s", className, value.ClassName)
		end

		if childrenCheck then
			local childrenSuccess, childrenErrMsg = childrenCheck(value)
			if not childrenSuccess then
				return false, childrenErrMsg
			end
		end

		return true
	end
end

--[[**
	ensures value is an enum of the correct type

	@param enum The enum to check

	@returns A function that will return true iff the condition is passed
**--]]
function t.enum(enum)
	assert(t.Enum(enum))
	return function(value)
		local enumItemSuccess, enumItemErrMsg = t.EnumItem(value)
		if not enumItemSuccess then
			return false, enumItemErrMsg
		end

		if value.EnumType == enum then
			return true
		else
			return false, string.format("enum of %s expected, got enum of %s", tostring(enum), tostring(value.EnumType))
		end
	end
end

do
	local checkWrap = t.tuple(t.callback, t.callback)

	--[[**
		wraps a callback in an assert with checkArgs

		@param callback The function to wrap
		@param checkArgs The functon to use to check arguments in the assert

		@returns A function that first asserts using checkArgs and then calls callback
	**--]]
	function t.wrap(callback, checkArgs)
		assert(checkWrap(callback, checkArgs))
		return function(...)
			assert(checkArgs(...))
			return callback(...)
		end
	end
end

--[[**
	asserts a given check

	@param check The function to wrap with an assert

	@returns A function that simply wraps the given check in an assert
**--]]
function t.strict(check)
	return function(...)
		assert(check(...))
	end
end

do
	local checkChildren = t.map(t.string, t.callback)

	--[[**
		Takes a table where keys are child names and values are functions to check the children against.
		Pass an instance tree into the function.
		If at least one child passes each check, the overall check passes.

		Warning! If you pass in a tree with more than one child of the same name, this function will always return false

		@param checkTable The table to check against

		@returns A function that checks an instance tree
	**--]]
	function t.children(checkTable)
		assert(checkChildren(checkTable))

		return function(value)
			local instanceSuccess, instanceErrMsg = t.Instance(value)
			if not instanceSuccess then
				return false, instanceErrMsg or ""
			end

			local childrenByName = {}
			for _, child in ipairs(value:GetChildren()) do
				local name = child.Name
				if checkTable[name] then
					if childrenByName[name] then
						return false, string.format("Cannot process multiple children with the same name %q", name)
					end

					childrenByName[name] = child
				end
			end

			for name, check in pairs(checkTable) do
				local success, errMsg = check(childrenByName[name])
				if not success then
					return false, string.format("[%s.%s] %s", value:GetFullName(), name, errMsg or "")
				end
			end

			return true
		end
	end
end

return t
]]></string>
        </Properties>
      </Item>
    </Item>
  </Item>
  <Item class="ServerScriptService" referent="29">
    <Properties>
      <string name="Name">ServerScriptService</string>
    </Properties>
    <Item class="Script" referent="30">
      <Properties>
        <string name="Name">Runner</string>
        <string name="Source"><![CDATA[--[[
    Test Runner
    HawDevelopment
    11/06/2021
--]]

local TestEz = require(game.ReplicatedStorage.TestEz)

local Tests = script.Parent:WaitForChild("Tests")

TestEz.TestBootstrap:run(Tests:GetDescendants())
]]></string>
      </Properties>
    </Item>
    <Item class="Folder" referent="31">
      <Properties>
        <string name="Name">Tests</string>
      </Properties>
      <Item class="ModuleScript" referent="32">
        <Properties>
          <string name="Name">Chain.spec</string>
          <string name="Source"><![CDATA[--[[
    Chain tests
    HawDevelopment
    26/06/2021
--]]

return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local lib = require(ReplicatedStorage.lib)
	---@module Chain
	local Chain = require(lib.Chain)

	local chains = {
		function()
			return true
		end,
		function()
			return false, "Error!"
		end,
	}

	describe("Chain.new", function()
		it("should return a valid Chain", function()
			local Chain = Chain.new(chains)

			expect(Chain.__chain).to.be.a("table")
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				Chain.new(13)
			end).to.be.throw()

			expect(function()
				Chain.new(workspace)
			end).to.be.throw()
		end)

		it("should be able to be created using __call", function()
			expect(function()
				Chain()
			end).to.never.be.throw()
		end)
	end)

	describe("Chain.add", function()
		local chain
		beforeEach(function()
			chain = Chain.new(chains)
		end)

		it("should add a handler to the Chain", function()
			chain.add(function() end, 1)
			expect(#chain.__chain).to.be.equal(3)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				chain.add(true)
			end).to.be.throw()

			expect(function()
				chain.add(function() end, "yes")
			end).to.be.throw()
		end)
	end)

	describe("Chain.execute", function()
		local chain
		beforeEach(function()
			chain = Chain.new(chains)
		end)

		it("should execute the chain", function()
			local res = true

			expect(function()
				res = chain.execute()
			end).to.never.be.throw()

			expect(res).to.be.equal(false)
		end)
	end)
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="33">
        <Properties>
          <string name="Name">Command.spec</string>
          <string name="Source"><![CDATA[--[[
    Command tests
    HawDevelopment
    26/06/2021
--]]

return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local lib = require(ReplicatedStorage.lib)
	---@module Command
	local Command = require(lib.Command)

	local commands = {
		Hey = function()
			-- Hello!
		end,
		Bye = function()
			-- Bye! :(
		end,
	}

	describe("Command.new", function()
		it("should return a valid command", function()
			local command = Command.new()

			expect(command.__commands).to.be.a("table")
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				Command.new(10)
			end).to.be.throw()

			expect(function()
				Command.new(workspace)
			end).to.be.throw()
		end)

		it("should be able to be created using __call", function()
			expect(function()
				Command()
			end).to.never.be.throw()
		end)
	end)

	describe("Command.add", function()
		local command
		beforeEach(function()
			command = Command.new()
		end)

		it("should add a command", function()
			command.add(commands.Hey, "Hey")
			expect(command.__commands["Hey"]).to.be.ok()
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				command.add(true)
			end).to.be.throw()

			expect(function()
				command.add(commands.Bye, 10)
			end).to.be.throw()
		end)
	end)

	describe("Command.execute", function()
		local command
		beforeEach(function()
			command = Command.new()
		end)

		it("should execure a function", function()
			local res
			command.add(function()
				res = true
			end, "Test")

			expect(function()
				command.execute("Test")
			end).to.never.be.throw()

			expect(res).to.be.equal(true)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				command.execute(10)
			end).to.be.throw()

			expect(function()
				command.execute(true)
			end).to.be.throw()
		end)
	end)
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="34">
        <Properties>
          <string name="Name">Factory.spec</string>
          <string name="Source"><![CDATA[--[[
    Factory Tests
    HawDevelopment
    11/06/2021
--]]

return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local lib = require(ReplicatedStorage.lib)
	local Factory = require(lib.Factory)
	local t = require(ReplicatedStorage.lib.t)

	local factoryEnum = {
		Developer = 1,
		Tester = 2,
	}

	local factories = {
		Developer = function(tab, name, age)
			tab.Name = name
			tab.Age = age
			tab.Profession = "Developer"
		end,
		Tester = function(tab, name, age)
			tab.Name = name
			tab.Age = age
			tab.Profession = "Tester"
		end,
	}

	describe("Factory.new", function()
		it("should create a valid factory", function()
			-- Enum, Table
			local factory = Factory.new(factoryEnum, factories)

			expect(factory.__factories).to.be.a("table")
			expect(factory.__enum).to.be.a("table")

			-- Factory should make a cope of input
			expect(factory.__factoris).to.never.be.equal(factories)
			expect(factory.__enum).to.never.be.equal(factoryEnum)

			-- Should be callable
			expect(getmetatable(factory).__call).to.be.a("function")
		end)

		it("should throw if given wrong arguments", function()
			expect(function()
				Factory.new(nil, nil)
			end).to.be.throw()

			expect(function()
				Factory.new("Factory", 10)
			end).to.be.throw()

			expect(function()
				Factory.new(game, function() end)
			end).to.be.throw()
		end)

		it("should error if enum doesnt line up with factories", function()
			expect(function()
				Factory.new({
					Developer = 1,
					CEO = 2,
				}, {
					CEO = function() end,
				})
			end).to.be.throw()
		end)

		it("should be able to be created using __call", function()
			local factory = Factory(factoryEnum, factories)

			expect(factory).to.be.a("table")
		end)
	end)

	describe("Factory.create", function()
		local factory = Factory(factoryEnum, factories)

		it("should create a valid class", function()
			local class = factory.create(1, "HawDevelopment", 69)

			expect(class.Name).to.be.equal("HawDevelopment")
			expect(class.Age).to.be.equal(69)
			expect(class.Profession).to.be.equal("Developer")
		end)

		it("should be able to use string as a type", function()
			local class = factory.create("Developer", "HawDevelopment", 69)

			expect(class.Name).to.be.equal("HawDevelopment")
			expect(class.Age).to.be.equal(69)
			expect(class.Profession).to.be.equal("Developer")
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				factory.create(nil, 10, {})
			end).to.be.throw()

			expect(function()
				factory.create("yes", {}, "what")
			end).to.be.throw()
		end)

		it("should comply with Factory rules", function()
			local ruleFactory = Factory.new(factoryEnum, factories)
			ruleFactory.rule({
				Factory.Type.string,
				t.number,
			})

			expect(function()
				ruleFactory.create(1, 1, "10")
			end).to.be.throw()

			expect(function()
				ruleFactory.create(1, "1", 10)
			end).to.never.be.throw()
		end)

		it("should comply with Factory bases", function()
			local baseFactory = Factory.new(factoryEnum, {
				Developer = function() end,
				Tester = function() end,
			})

			baseFactory.base({
				Name = Factory.Argument(1),
				Age = Factory.Argument(2),
			})

			local class = baseFactory.create(1, "HawDevelopment", 420)

			expect(class.Name).to.be.equal("HawDevelopment")
			expect(class.Age).to.be.equal(420)
		end)
	end)

	describe("Factory.rule", function()
		---@type Factory
		local factory = Factory.new(factoryEnum, factories)

		beforeAll(function()
			factory.rule(nil)
		end)

		it("should set the rule", function()
			local rule = {
				Factory.Type.string,
				Factory.Type.number,
			}

			factory.rule(rule)

			expect(factory.__rule).to.be.a("table")
			expect(factory.__rule).to.never.be.equal(rule)

			factory.rule(nil)

			expect(factory.__rule).to.be.equal(nil)
		end)

		it("should be able to be given nil", function()
			expect(function()
				factory.rule({})
				factory.rule(nil)
			end).never.to.be.throw()

			expect(factory.__rule).to.be.equal(nil)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				factory.rule("Yes")
			end).to.be.throw()

			expect(function()
				factory.rule(20)
			end).to.be.throw()
		end)

		it("could be used with osyrisrblx/t module", function()
			local ruleFactory = Factory.new(factoryEnum, factories)
			ruleFactory.rule({
				t.string,
				t.number,
			})

			expect(function()
				ruleFactory.create(1, 30, game)
			end).to.be.throw()

			expect(function()
				ruleFactory.create(1, "HawDevelopment", 69)
			end).to.never.be.throw()
		end)
	end)

	describe("Factory.base", function()
		local factory = Factory.new(factoryEnum, factories)

		beforeAll(function()
			factory.rule(nil)
			factory.base(nil)
		end)

		it("should set the base", function()
			local base = {
				Name = Factory.Argument(1),
				Age = Factory.Argument(2),
				Iq = 120,
			}

			factory.base(base)

			expect(factory.__base).to.be.a("table")
			expect(factory.__base).to.never.be.equal(base)
		end)

		it("should be able to be given nil", function()
			expect(function()
				factory.base({})
				factory.base(nil)
			end).never.to.be.throw()

			expect(factory.__base).to.be.equal(nil)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				factory.base("No")
			end).to.be.throw()

			expect(function()
				factory.base(12)
			end).to.be.throw()
		end)
	end)
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="35">
        <Properties>
          <string name="Name">Observer.spec</string>
          <string name="Source"><![CDATA[--[[
    Observer tests
    HawDevelopment
    24/06/2021
--]]

return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local lib = require(ReplicatedStorage.lib)
	---@module Observer
	local Observer = require(lib.Observer)

	describe("Observer.new", function()
		it("should create a valid observer", function()
			local observer
			expect(function()
				observer = Observer.new()
			end).to.never.be.throw()

			expect(observer.__listeners).to.be.a("table")
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				Observer.new(game)
			end).to.be.throw()

			expect(function()
				Observer.new("Yes")
			end).to.be.throw()

			expect(function()
				Observer.new(420)
			end).to.be.throw()
		end)

		it("should be able to be created using __call", function()
			expect(function()
				Observer()
			end).to.never.be.throw()
		end)
	end)

	describe("Observer.add", function()
		---@type Observer
		local observer

		beforeEach(function()
			observer = Observer.new()
		end)

		it("should add handler to listners", function()
			expect(function()
				observer.add(function() end)
			end).to.never.be.throw()

			expect(#observer.__listeners).to.be.equal(1)
		end)

		it("should return a function", function()
			local func = observer.add(function() end)

			expect(func).to.be.a("function")
			expect(#observer.__listeners).to.be.equal(1)

			func()

			expect(#observer.__listeners).to.be.equal(0)
		end)

		it("should work with types", function()
			observer.add(function() end, "Hello!")

			expect(#observer.__listeners["Hello!"]).to.be.equal(1)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				observer.add("Yes", 1)
			end).to.be.throw()

			expect(function()
				observer.add(10, game)
			end).to.be.throw()

			expect(function()
				observer.add({})
			end).to.be.throw()
		end)
	end)

	describe("Observer.fire", function()
		---@type Observer
		local observer

		beforeEach(function()
			observer = Observer.new()
		end)

		it("should fire listners", function()
			local res = false

			observer.add(function()
				res = true
			end)
			observer.fire()

			expect(res).to.be.equal(true)
		end)

		it("should fire listners with types", function()
			local res = false

			observer.add(function()
				res = true
			end, "Hello!")
			observer.fire("Hello!")

			expect(res).to.be.equal(true)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				observer.fire({}, true)
			end).to.be.throw()
		end)
	end)
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="36">
        <Properties>
          <string name="Name">Singleton.spec</string>
          <string name="Source"><![CDATA[--[[
    Singleton Tests
    HawDevelopment
    14/06/2021
--]]

return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local lib = require(ReplicatedStorage.lib)
	local Singleton = require(lib.Singleton)

	local function ObjectCreater()
		return {
			Name = "HawDevelopment",
			Skill = "Scripting",
			Iq = -10,
		}
	end

	describe("Singleton.new", function()
		it("should create a valid singleton", function()
			local singleton
			expect(function()
				singleton = Singleton.new(ObjectCreater)
			end).to.never.be.throw()

			expect(singleton.__creator).to.be.equal(ObjectCreater)
			expect(singleton.__obj).to.be.equal(nil)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				Singleton.new()
			end).to.be.throw()

			expect(function()
				Singleton.new("Yes")
			end).to.be.throw()

			expect(function()
				Singleton.new(420)
			end).to.be.throw()
		end)

		it("should be able to be created using __call", function()
			expect(function()
				Singleton(ObjectCreater)
			end).to.never.be.throw()
		end)
	end)

	describe("Singleton.get", function()
		local singleton
		beforeEach(function()
			singleton = Singleton.new(ObjectCreater)
		end)

		it("should return the singleton", function()
			local ret
			expect(function()
				ret = singleton.get()
			end).to.never.be.throw()

			expect(ret).to.be.a("table")
			expect(ret.Name).to.be.equal("HawDevelopment")
			expect(ret.Iq).to.be.equal(-10)
			expect(ret.Skill).to.be.equal("Scripting")
		end)

		it("should be able to be created using __call", function()
			expect(function()
				singleton(ObjectCreater)
			end).to.never.be.throw()
		end)
	end)

	describe("Singleton.destroy", function()
		local singleton
		beforeEach(function()
			singleton = Singleton.new(ObjectCreater)
		end)

		it("should destroy the current object", function()
			local ret
			expect(function()
				ret = singleton.get()
			end).to.never.be.throw()

			singleton.destroy()
			expect(singleton.__obj).to.be.equal(nil)

			expect(singleton.get()).to.never.be.equal(ret)
		end)
	end)
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="37">
        <Properties>
          <string name="Name">State.spec</string>
          <string name="Source"><![CDATA[--[[
    State test
    HawDevelopment
    26/06/2021
--]]

return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local lib = require(ReplicatedStorage.lib)
	local Observer = require(lib.Observer)
	---@module State
	local State = require(lib.State)

	describe("State.new", function()
		it("should return a valid state", function()
			local state = State.new(true)

			expect(state.__observer).to.be.a("table")
			expect(state.__state).to.be.equal(true)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				State.new(nil, 10)
			end).to.be.throw()

			expect(function()
				State.new(nil, game)
			end).to.be.throw()
		end)

		it("should be able to be created using __call", function()
			expect(function()
				State()
			end).to.never.be.throw()
		end)
	end)

	describe("State.observer", function()
		local state
		beforeEach(function()
			state = State.new()
		end)

		it("should set observer", function()
			local observer = Observer.new()

			state.observer(observer)
			expect(state.__observer).to.be.equal(observer)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				State.new(true, "Sup")
			end).to.be.throw()

			expect(function()
				State.new(true, 10)
			end).to.be.throw()
		end)
	end)

	describe("State.bind", function()
		local state
		beforeEach(function()
			state = State.new()
		end)

		it("should bind a function", function()
			expect(function()
				state.bind(function()
					print("Hello world!")
				end)
			end).to.never.be.throw()
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				state.bind("yes")
			end).to.be.throw()

			expect(function()
				state.bind(function() end, workspace)
			end).to.be.throw()
		end)
	end)

	describe("State.set", function()
		local state
		beforeEach(function()
			state = State.new()
		end)

		it("should set the state", function()
			state.set(10)

			expect(state.__state).to.be.equal(10)
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				state.set(1, game)
			end).to.be.throw()

			expect(function()
				state.set(1, false)
			end).to.be.throw()
		end)
	end)

	describe("State.get", function()
		local state
		beforeEach(function()
			state = State.new()
		end)

		it("should return the state", function()
			state.set(10)

			expect(state.get()).to.be.equal(10)
		end)
	end)
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="38">
        <Properties>
          <string name="Name">Strategy.spec</string>
          <string name="Source"><![CDATA[--[[
    Strategy tests
    HawDevelopment
    23/06/2021
--]]

return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local lib = require(ReplicatedStorage.lib)

	---@module Strategy
	local Strategy = require(lib.Strategy)

	local handles = {
		Support = function(name)
			return "Support " .. tostring(name)
		end,
		Ticket = function(name)
			return "Ticket " .. tostring(name)
		end,
	}

	describe("Strategy.new", function()
		it("should return a valid strategy", function()
			local strat = Strategy.new(handles, "Support")

			expect(strat.__handles).to.be.a("table")
			expect(strat.__strategy).to.be.a("function")
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				Strategy.new("Sup")
			end).to.be.throw()

			expect(function()
				Strategy.new(69)
			end).to.be.throw()
		end)

		it("should be able to be created using __call", function()
			expect(function()
				Strategy(handles)
			end).to.never.be.throw()
		end)
	end)

	describe("Strategy.set", function()
		local strat
		beforeEach(function()
			strat = Strategy.new(handles)
		end)

		it("should set the current strategy", function()
			-- Reset strategy
			strat.__strategy = nil
			strat.set("Ticket")

			expect(strat.__strategy).to.be.a("function")
		end)

		it("should error if given wrong arguments", function()
			expect(function()
				strat.set(game)
			end).to.be.throw()

			expect(function()
				strat.set()
			end).to.be.throw()

			expect(function()
				strat.set({})
			end).to.be.throw()
		end)

		it("should error if strategy isnt found", function()
			expect(function()
				strat.set("Developer")
			end).to.be.throw()
		end)
	end)

	describe("Strategy.call", function()
		local strat
		beforeEach(function()
			strat = Strategy.new(handles, 1)
		end)

		it("should call strategy and return its value", function()
			-- Just to be sure
			strat.set("Support")

			local ret
			expect(function()
				ret = strat.call("1")
			end).to.never.be.throw()

			expect(ret).to.be.equal("Support 1")
		end)

		it("should error if no strategy is set", function()
			strat.__strategy = nil
			expect(function()
				strat.call()
			end).to.be.throw()
		end)

		it("should be able to be called using __call", function()
			strat.set("Ticket")

			local ret
			expect(function()
				ret = strat("1")
			end).to.never.be.throw()

			expect(ret).to.be.equal("Ticket 1")
		end)
	end)
end
]]></string>
        </Properties>
      </Item>
      <Item class="ModuleScript" referent="39">
        <Properties>
          <string name="Name">Types</string>
          <string name="Source"><![CDATA[--[[
    Just messing around here, trying to check Luau and Emmylua types
    HawDevelopment
    12/06/2021
--]]
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Factory = require(ReplicatedStorage.lib.Factory)

-- Factory

---@type Factory
local factory = Factory.new()

Factory.Argument()
]]></string>
        </Properties>
      </Item>
    </Item>
  </Item>
  <Item class="SoundService" referent="40">
    <Properties>
      <string name="Name">SoundService</string>
      <bool name="RespectFilteringEnabled">true</bool>
    </Properties>
  </Item>
  <Item class="StarterPlayer" referent="41">
    <Properties>
      <string name="Name">StarterPlayer</string>
    </Properties>
    <Item class="StarterPlayerScripts" referent="42">
      <Properties>
        <string name="Name">StarterPlayerScripts</string>
      </Properties>
      <Item class="LocalScript" referent="43">
        <Properties>
          <string name="Name">Runner</string>
          <string name="Source"><![CDATA[--[[
    Test Runner
    HawDevelopment
    11/06/2021
--]]

local TestEz = require(game.ReplicatedStorage.TestEz)

local Tests = script.Parent:WaitForChild("Tests")

TestEz.TestBootstrap:run(Tests:GetDescendants())
]]></string>
        </Properties>
      </Item>
      <Item class="Folder" referent="44">
        <Properties>
          <string name="Name">Tests</string>
        </Properties>
      </Item>
    </Item>
  </Item>
  <Item class="Workspace" referent="45">
    <Properties>
      <string name="Name">Workspace</string>
      <bool name="FilteringEnabled">true</bool>
    </Properties>
  </Item>
</roblox>